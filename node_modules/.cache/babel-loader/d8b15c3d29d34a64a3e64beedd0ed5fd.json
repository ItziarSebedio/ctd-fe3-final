{"ast":null,"code":"var _jsxFileName = \"/Users/Itziar/Desktop/fe3-final-isebedio/src/Components/utils/global.context.jsx\";\nimport { createContext, useEffect, useReducer } from \"react\"; // export const [state, dispatch] = useReducer(reducer, initialState);\n// function reducer(state, action) {\n//   switch (action.type) {\n//     case \"light\":\n//       return {\n//         font: \"black\",\n//         background: \"white\",\n//       };\n//     case \"dark\":\n//       return {\n//         font: \"white\",\n//         background: \"black\",\n//       };\n//     default:\n//       return state;\n//   }\n// }\n// //Llamada a la api\n// const data = async () => {\n//   const res = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n//   const data = await res.json();\n// };\n// useEffect(() => {\n//   getData();\n// });\n// //Funciones para el cambio de tema claro/oscuro\n// function handleLightTheme() {\n//   dispatch({ type: \"light\" });\n// }\n// function handleDarkTheme() {\n//   dispatch({ type: \"dark\" });\n// }\n//\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const initialState = {\n  theme: \"light\",\n  data: []\n}; //\n\nexport const ContextGlobal = /*#__PURE__*/createContext(undefined);\nexport const ContextProvider = _ref => {\n  let {\n    children\n  } = _ref;\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n  return /*#__PURE__*/_jsxDEV(ContextGlobal.Provider, {\n    value: {\n      handleDarkTheme,\n      handleLightTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_c = ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["createContext","useEffect","useReducer","initialState","theme","data","ContextGlobal","undefined","ContextProvider","children","handleDarkTheme","handleLightTheme"],"sources":["/Users/Itziar/Desktop/fe3-final-isebedio/src/Components/utils/global.context.jsx"],"sourcesContent":["import { createContext, useEffect, useReducer } from \"react\";\n\n// export const [state, dispatch] = useReducer(reducer, initialState);\n\n// function reducer(state, action) {\n//   switch (action.type) {\n//     case \"light\":\n//       return {\n//         font: \"black\",\n//         background: \"white\",\n//       };\n//     case \"dark\":\n//       return {\n//         font: \"white\",\n//         background: \"black\",\n//       };\n//     default:\n//       return state;\n//   }\n// }\n\n// //Llamada a la api\n// const data = async () => {\n//   const res = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n//   const data = await res.json();\n// };\n\n// useEffect(() => {\n//   getData();\n// });\n\n// //Funciones para el cambio de tema claro/oscuro\n// function handleLightTheme() {\n//   dispatch({ type: \"light\" });\n// }\n// function handleDarkTheme() {\n//   dispatch({ type: \"dark\" });\n// }\n\n//\nexport const initialState = { theme: \"light\", data: [] };\n//\nexport const ContextGlobal = createContext(undefined);\n\nexport const ContextProvider = ({ children }) => {\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n\n  return (\n    <ContextGlobal.Provider value={{ handleDarkTheme, handleLightTheme }}>\n      {children}\n    </ContextGlobal.Provider>\n  );\n};\n"],"mappings":";AAAA,SAASA,aAAT,EAAwBC,SAAxB,EAAmCC,UAAnC,QAAqD,OAArD,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,OAAO,MAAMC,YAAY,GAAG;EAAEC,KAAK,EAAE,OAAT;EAAkBC,IAAI,EAAE;AAAxB,CAArB,C,CACP;;AACA,OAAO,MAAMC,aAAa,gBAAGN,aAAa,CAACO,SAAD,CAAnC;AAEP,OAAO,MAAMC,eAAe,GAAG,QAAkB;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAC/C;EAEA,oBACE,QAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAE;MAAEC,eAAF;MAAmBC;IAAnB,CAA/B;IAAA,UACGF;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CARM;KAAMD,e"},"metadata":{},"sourceType":"module"}