{"ast":null,"code":"var _jsxFileName = \"/Users/Itziar/Desktop/fe3-final-isebedio/src/Components/utils/global.context.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"light\":\n      return { ...state,\n        theme: {\n          font: \"black\",\n          background: \"white\"\n        }\n      };\n\n    case \"dark\":\n      return { ...state,\n        theme: {\n          font: \"white\",\n          background: \"black\"\n        }\n      };\n\n    case \"consultarAPI\":\n      return { ...state,\n        data: action.payload\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport const initialState = {\n  theme: {\n    font: \"black\",\n    background: \"white\"\n  },\n  data: []\n};\nexport const ContextGlobal = /*#__PURE__*/createContext();\nexport const ContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n  const [state, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then(response => response.json()).then(data => {\n      dispatch({\n        type: \"consultarAPI\",\n        payload: data\n      });\n    }).catch(error => {\n      console.error(\"Error al obtener la información.\", error);\n    });\n  }, []);\n\n  function handleLightTheme() {\n    dispatch({\n      type: \"light\"\n    });\n  }\n\n  function handleDarkTheme() {\n    dispatch({\n      type: \"dark\"\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(ContextGlobal.Provider, {\n    value: {\n      handleDarkTheme,\n      handleLightTheme,\n      data: state.data,\n      theme: state\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n\n_c = ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["createContext","useEffect","useReducer","reducer","state","action","type","theme","font","background","data","payload","initialState","ContextGlobal","ContextProvider","children","dispatch","fetch","then","response","json","catch","error","console","handleLightTheme","handleDarkTheme"],"sources":["/Users/Itziar/Desktop/fe3-final-isebedio/src/Components/utils/global.context.jsx"],"sourcesContent":["import { createContext, useEffect, useReducer } from \"react\";\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"light\":\n      return {\n        ...state,\n        theme: {\n          font: \"black\",\n          background: \"white\",\n        },\n      };\n    case \"dark\":\n      return {\n        ...state,\n        theme: {\n          font: \"white\",\n          background: \"black\",\n        },\n      };\n    case \"consultarAPI\":\n      return { ...state, data: action.payload };\n    default:\n      return state;\n  }\n}\n\nexport const initialState = {\n  theme: { font: \"black\", background: \"white\" },\n  data: [],\n};\n\nexport const ContextGlobal = createContext();\n\nexport const ContextProvider = ({ children }) => {\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((data) => {\n        dispatch({ type: \"consultarAPI\", payload: data });\n      })\n      .catch((error) => {\n        console.error(\"Error al obtener la información.\", error);\n      });\n  }, []);\n\n  function handleLightTheme() {\n    dispatch({ type: \"light\" });\n  }\n  function handleDarkTheme() {\n    dispatch({ type: \"dark\" });\n  }\n\n  return (\n    <ContextGlobal.Provider\n      value={{ handleDarkTheme, handleLightTheme, data: state.data, theme: state }}\n    >\n      {children}\n    </ContextGlobal.Provider>\n  );\n};\n"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,SAAxB,EAAmCC,UAAnC,QAAqD,OAArD;;;AAEA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;EAC9B,QAAQA,MAAM,CAACC,IAAf;IACE,KAAK,OAAL;MACE,OAAO,EACL,GAAGF,KADE;QAELG,KAAK,EAAE;UACLC,IAAI,EAAE,OADD;UAELC,UAAU,EAAE;QAFP;MAFF,CAAP;;IAOF,KAAK,MAAL;MACE,OAAO,EACL,GAAGL,KADE;QAELG,KAAK,EAAE;UACLC,IAAI,EAAE,OADD;UAELC,UAAU,EAAE;QAFP;MAFF,CAAP;;IAOF,KAAK,cAAL;MACE,OAAO,EAAE,GAAGL,KAAL;QAAYM,IAAI,EAAEL,MAAM,CAACM;MAAzB,CAAP;;IACF;MACE,OAAOP,KAAP;EApBJ;AAsBD;;AAED,OAAO,MAAMQ,YAAY,GAAG;EAC1BL,KAAK,EAAE;IAAEC,IAAI,EAAE,OAAR;IAAiBC,UAAU,EAAE;EAA7B,CADmB;EAE1BC,IAAI,EAAE;AAFoB,CAArB;AAKP,OAAO,MAAMG,aAAa,gBAAGb,aAAa,EAAnC;AAEP,OAAO,MAAMc,eAAe,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAC/C;EAEA,MAAM,CAACX,KAAD,EAAQY,QAAR,IAAoBd,UAAU,CAACC,OAAD,EAAUS,YAAV,CAApC;EAEAX,SAAS,CAAC,MAAM;IACdgB,KAAK,CAAC,4CAAD,CAAL,CACGC,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAESR,IAAD,IAAU;MACdM,QAAQ,CAAC;QAAEV,IAAI,EAAE,cAAR;QAAwBK,OAAO,EAAED;MAAjC,CAAD,CAAR;IACD,CAJH,EAKGW,KALH,CAKUC,KAAD,IAAW;MAChBC,OAAO,CAACD,KAAR,CAAc,kCAAd,EAAkDA,KAAlD;IACD,CAPH;EAQD,CATQ,EASN,EATM,CAAT;;EAWA,SAASE,gBAAT,GAA4B;IAC1BR,QAAQ,CAAC;MAAEV,IAAI,EAAE;IAAR,CAAD,CAAR;EACD;;EACD,SAASmB,eAAT,GAA2B;IACzBT,QAAQ,CAAC;MAAEV,IAAI,EAAE;IAAR,CAAD,CAAR;EACD;;EAED,oBACE,QAAC,aAAD,CAAe,QAAf;IACE,KAAK,EAAE;MAAEmB,eAAF;MAAmBD,gBAAnB;MAAqCd,IAAI,EAAEN,KAAK,CAACM,IAAjD;MAAuDH,KAAK,EAAEH;IAA9D,CADT;IAAA,UAGGW;EAHH;IAAA;IAAA;IAAA;EAAA,QADF;AAOD,CA9BM;;GAAMD,e;;KAAAA,e"},"metadata":{},"sourceType":"module"}